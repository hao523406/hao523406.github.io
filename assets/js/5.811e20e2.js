(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{207:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),s("h2",{attrs:{id:"jvm体系结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm体系结构"}},[t._v("#")]),t._v(" JVM体系结构")]),t._v(" "),s("ul",[s("li",[t._v("JVM是运行在操作系统之上的，它与硬件没有直接的交互。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/e0d05571783e41488082f42b70854b88.png",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("三种JVM：\n"),s("ul",[s("li",[t._v("Sun公司的"),s("strong",[t._v("HotSpot")])]),t._v(" "),s("li",[t._v("BEA公司的JRockit")]),t._v(" "),s("li",[t._v("IBM公司的J9 VM")])])])]),t._v(" "),s("h2",{attrs:{id:"classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classloader"}},[t._v("#")]),t._v(" ClassLoader")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("ClassLoader (类装载器)")]),t._v("：负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader"),s("strong",[t._v("只负责class文件的加载")]),t._v("，至于class是否可以运行，则由 Execution Engine (执行引擎)决定。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/f637cc361ba84d7686514d07ad068b98.png",alt:""}})])])]),t._v(" "),s("h3",{attrs:{id:"jvm的classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm的classloader"}},[t._v("#")]),t._v(" JVM的ClassLoader")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JVM的类加载器：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("虚拟机自带的加载器：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("类加载器")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("作用")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("实现语言")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Bootstrap ClassLoader")]),t._v(" (启动类加载器)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("加载"),s("code",[t._v("$JAVA_HOME/jre/lib/rt.jar")]),t._v("下的类(class文件)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("C++")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Extension ClassLoader")]),t._v(" (扩展类加载器)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("加载"),s("code",[t._v("$JAVA_HOME/jre/lib/ext/*.jar")]),t._v("下的类(class文件)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Java")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Appliation ClassLoader")]),t._v(" (系统类加载器/应用程序类加载器)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("加载当前应用的classpath的所有类")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Java")])])])])]),t._v(" "),s("li",[s("p",[t._v("用户自定义加载器：User-Defined Class Loader，"),s("code",[t._v("java.lang.ClassLoader")]),t._v("的字类，用户可以定义类的加载方式。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("sun.misc.Launcher")]),t._v(" 它是一个java虚拟机的入口应用。")])])])])]),t._v(" "),s("li",[s("p",[t._v("关系图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/0d7eec28f6534ad68b8c53f1f10e94e2.png",alt:""}})])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sun.misc.Launcher$ExtClassLoader@1b6d3586")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sun.misc.Launcher$AppClassLoader@18b4aac2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n\tnull表示最顶层的类加载器即Bootstrap ClassLoader，因为该加载器由C++实现，所以看不到用null表示\n\t上下对比看出，类加载器的继承关系。而且看出Object等java.lang包的类由Bootstrap ClassLoader加载。\n */")]),t._v("\n")])])]),s("h3",{attrs:{id:"classloader的加载原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classloader的加载原理"}},[t._v("#")]),t._v(" ClassLoader的加载原理")]),t._v(" "),s("p",[t._v("JVM对class文件采用的是"),s("strong",[t._v("按需加载")]),t._v("的方式，也就是当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，JVM采用的是双亲委派模式(即把加载请求交由父类处理，是一种任务委派模式)。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("双亲委派机制")]),t._v("：如果一个类加载器收到了类加载的请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行。如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终到达最顶层的Bootstrap ClassLoader。如果父类加载器可以完成这个类的加载任务，就成功返回。如果父类加载器无法完成加载任务，子加载器才会尝试自己去加载，这个过程也叫反向委派。只要这个类存在，最后肯定能加载成功进内存。")]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("p",[t._v("避免类的重复加载；")])]),t._v(" "),s("li",[s("p",[t._v("保护程序安全，防止核心API被随意更改。")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("沙箱安全机制")]),t._v("：保护Java核心代码。")]),t._v(" "),s("blockquote",[s("p",[t._v("例如自定义 java.lang.String 类，与Java核心的String类的全限定名相同。由于JVM的双亲委派机制，JVM会优先加载 $JAVA_HOME/jre/lib/rt.jar里的 java.lang.String 类，自定义的String类就不会被加载，保证了Java核心代码的安全，其他类使用Java API不会出现问题。")]),t._v(" "),s("p",[t._v("如果在自定义 java.lang.String 类里添加main方法，运行会报错：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("错误"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 在类 java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" 中找不到 main 方法"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 请将 main 方法定义为"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n否则 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JavaFX")]),t._v(" 应用程序类必须扩展javafx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("application"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Application")]),t._v("\n")])])]),s("p",[t._v("因为自定义的String类没有被加载，加载进JVM的String类(也就是Java原来的String类)根本就没有main这个方法，所以运行报错。")])])])]),t._v(" "),s("h2",{attrs:{id:"execution-engine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#execution-engine"}},[t._v("#")]),t._v(" Execution Engine")]),t._v(" "),s("p",[s("strong",[t._v("Execution Engine (执行引擎)")]),t._v("：执行引擎负责解释命令，提交操作系统执行。")]),t._v(" "),s("h2",{attrs:{id:"native"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#native"}},[t._v("#")]),t._v(" Native")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("Native Interface (本地接口)")]),t._v("：本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++程序，Java 诞生的时候是 C/C++横行的时候，要想立足，必须有调用 C/C++程序，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是 Native Method Stack中登记 native方法，在Execution Engine 执行时加载native libraies。")]),t._v(" "),s("blockquote",[s("p",[t._v("目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用 Socket通信，也可以使用Web Service等等。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Native Method Stack (本地方法栈)")]),t._v("：它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/e0d05571783e41488082f42b70854b88.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("举个native方法的例子：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("线程对象调用start()方法，该方法里会调用Thread类的start0()方法。该方法是用native修饰，只有方法签名，没有方法实现，都是操作系统需要实现的。所以线程对象调用start()方法，因为内部调用native方法，所以线程不一定马上启动，要根据操作系统决定。")])]),t._v(" "),s("h2",{attrs:{id:"pc寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pc寄存器"}},[t._v("#")]),t._v(" PC寄存器")]),t._v(" "),s("p",[s("strong",[t._v("PC寄存器(程序计数器)")]),t._v("："),s("strong",[t._v("每个线程")]),t._v("都有一个程序计数器，是"),s("strong",[t._v("线程私有")]),t._v("的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。")]),t._v(" "),s("blockquote",[s("p",[t._v("程序计数器是JVM中唯一一块不会产生error的内存区域。")])]),t._v(" "),s("h2",{attrs:{id:"方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[t._v("#")]),t._v(" 方法区")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("方法区")]),t._v("：和 JVM堆一样，是各个线程共享的内存区域，每个JVM只有一个方法区。用于存储已被虚拟机加载的 类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),t._v(" "),s("li",[s("strong",[t._v("静态变量 + 常量 + 类/接口的信息 + 方法的信息")]),t._v(" 都存在方法区中(所使用的内存都在方法区中分配)，但是实例对象和实例变量存在堆内存中，和方法区无关。")])]),t._v(" "),s("blockquote",[s("p",[t._v("方法区只是一个规定，相当于Java的接口，JVM另有其他结构实现方法区。")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("方法区实现")]),t._v("的演变：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("时间")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("实现")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("JDK7 + 之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("永久代 (HotSpot JVM的实现)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("JDK8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("元空间 (HotSpot JVM的实现，移除了永久代)")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("运行时常量池")]),t._v("的演变：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("时间")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("存放位置")]),t._v(" "),s("th",[t._v("实现方式")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("JDK7 + 之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("方法区")]),t._v(" "),s("td",[t._v("永久代")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("JDK8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("方法区")]),t._v(" "),s("td",[t._v("元空间")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("字符串常量池")]),t._v("的演变：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("时间")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("存放位置")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("JDK7 之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("方法区")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("JDK7")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("堆")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("JDK8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("堆")])])])])])]),t._v(" "),s("h2",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("栈 (Stack)")]),t._v("：也叫 Java虚拟机栈 (Java Virtual Machine Stacks)，是在"),s("strong",[t._v("线程创建时创建")]),t._v("，是"),s("strong",[t._v("线程私有")]),t._v("的，它的生命期是跟随线程的生命期，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over。")])]),t._v(" "),s("li",[s("p",[t._v("对于 基本数据类型 和 对象类型，"),s("strong",[t._v("栈存储的数据是：基本数据类型的值(也是对象) 和 对象引用")]),t._v("(存在堆中的对象(普通对象或数组对象)的引用)。")]),t._v(" "),s("blockquote",[s("p",[t._v("栈描述Java方法执行的内存模型：每一个方法从调用直到执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。每个方法在执行的同时都会创建一个栈帧，压入栈，方法执行完成就会从栈顶弹出，遵循“后进先出”的原则。栈顶的方法就是当前执行的方法。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("栈帧 (Stack Frame)")]),t._v("：栈帧存储着局部变量表、操作数栈、动态链接、方法出口等信息。")]),t._v(" "),s("blockquote",[s("p",[t._v("局部变量表存放了编译期可知的 8种基本数据类型、对象引用、返回地址类型。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/3e183a24246549e6bbc29e50c2c751d4.png",alt:""}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("栈、堆、方法区的关系：")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/1250b63dfbd741fd82f58b4c8d31ed2d.png",alt:""}})]),t._v(" "),s("ul",[s("li",[s("code",[t._v("java.lang.StackOverflowError")]),t._v("：栈溢出。表示某个线程的线程栈空间被耗尽，没有足够资源分配给新创建的栈帧。")])]),t._v(" "),s("h2",{attrs:{id:"堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("堆 (Heap)")]),t._v("：Java堆是被所有线程共享的一块内存区域，在JVM启动时创建。一个JVM只有一个堆，堆内存的大小是可以调节的，堆是JVM管理的内存中最大的一块。")])]),t._v(" "),s("li",[s("p",[t._v("类加载器读取了类文件后，需要把[ 类、方法、常量(final修饰的变量) ]的对象放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("堆只存对象，所有对象都在堆里")]),t._v("：堆不存 基本数据类型的值 和 对象引用，只存对象本身。")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("为什么基本数据类型的值(也是对象) 不存到堆中，而是直接在栈中存在这个值？"),s("br"),t._v("\n因为堆中的对象大多数都是动态变化的，就是占用内存的多少是变化的。而栈中存的基本数据类型的值 或 堆中对象的引用都是不变的，长度固定不会出现动态增长。这就是堆栈分离的好处。")])])])])]),t._v(" "),s("h3",{attrs:{id:"堆的组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆的组成"}},[t._v("#")]),t._v(" 堆的组成")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("堆"),s("strong",[t._v("逻辑")]),t._v("上分为三个部分：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("新生区 (新生代)")])]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Young Generation Space")])]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Young / New")])])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("养老区 (老年代)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Tenure generation space")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Old / Tenure")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("永久区 (永久代)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Permanent Space")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Perm")])])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/9bda32774f24475397833bc4210bb98c.png",alt:""}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("新生区是对象的诞生、成长、消亡的区域，一个对象在这里产生，应用，最后被垃圾回收器收集，结束声明。"),s("strong",[t._v("新生区")]),t._v("又分为两部分："),s("strong",[t._v("伊甸区(Eden Space)、幸存区(Survivor Space)")]),t._v("。"),s("br"),t._v(" "),s("strong",[t._v("幸存区")]),t._v("有2个区："),s("strong",[t._v("幸存 from区、幸存 to区")]),t._v("。from区 和 to区 是相对的。保持**”to区总为空“**的原则。")])]),t._v(" "),s("li",[s("p",[t._v("堆逻辑分区的默认比例：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/4a529885e72f49168b7ef43eeedb0481.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("所有的对象都是在伊甸区被new出来的。"),s("strong",[t._v("当伊甸区没有足够内存空间分配给新对象时，JVM的垃圾回收器将对 伊甸区 + 幸存from区 进行 Minor GC")]),t._v("：将 伊甸区 + 幸存from区 中的不再被引用的对象进行销毁。如果对象在伊甸区出生并经过第一次 Minor GC 后仍然存活，并且能被幸存区容纳的话，将被移动到幸存区，并且对象年龄设为1。  当它的年龄增加到一定程度(默认15岁)，将被移动到养老区。")]),t._v(" "),s("blockquote",[s("p",[t._v("动态年龄判断：JVM并不是永远要求对象年龄达到设置值(默认15岁)才能晋升养老区。如果在幸存区空间中相同年龄所有对象大小的总和大于幸存区空间的一半(指from区)，年龄大于或等于该年龄的对象就可以直接进入养老区，无须等到要求的年龄。")])])]),t._v(" "),s("li",[s("p",[t._v("发生Minor GC时，检查发现 幸存from区的剩余空间不能满足伊甸区的所有存活对象(就是存活对象不能被幸存区容纳)，只好通过分配担保机制提前将所有存活对象转移到养老区。转移后，幸存区空闲，伊甸区分配足够空间给将要创建的新对象。")]),t._v(" "),s("blockquote",[s("p",[t._v("空间分配担保：在发生 Minor GC 之前，JMV会先检查养老区最大可用的连续空间是否大于新生区所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。如果不成立，则JVM会查看设置值是否允许担保失败。如果允许，那么会继续检查养老区最大可用的连续空间是否大于历次晋升养老区对象的平局大小，如果大于，将尝试着进行一次 Minor GC，尽管这次 Minor GC 是有风险的；如果小于，或者设置值不允许冒险，那么这时也要改为进行一次 Major GC。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("大对象直接进入养老区")]),t._v("。大对象指需要大量连续内存空间的Java对象，最典型的大对象就是很长的字符串以及数组。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("若养老区也满了，就会对养老区进行 Major GC (Full GC)")]),t._v('。若养老区执行了Full GC之后发现以让无法进行对象的保存，就会产生OOM异常"OutOfMemoryError"。')])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("永久区是一个常驻内存区域")]),t._v("，用于存放JDK自身所携带的类、接口的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回到掉的，"),s("strong",[t._v("关闭 JVM 才会释放此区域的内存")]),t._v("。")])])]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("p",[t._v("对象主要分配在新生代的伊甸区上(若启动了本地线程分配缓冲，按线程优先在TLAB上分配)，"),s("br"),t._v(" "),s("strong",[t._v("少数情况下可能会直接分配在养老区")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("永久代 就是方法区的实现。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JDK7 之前有永久代；")])]),t._v(" "),s("li",[s("p",[t._v("JDK7 有永久代，但逐渐”去永久代“；")])]),t._v(" "),s("li",[s("p",[t._v("JDK8 无永久代，被 元空间 代替。")])])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.lang.OutOfMemoryError")]),t._v("：内存溢出。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，会抛出异常。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("java.lang.OutOfMemoryError: Java heap space异常")]),t._v("：说明JVM的堆内存不够。\n"),s("ul",[s("li",[t._v("原因：JVM的堆内存设置不够，可以通过参数 -Xms (启动时占用内存大小)、-Xmx (运行期间最大可占用的内存大小)来调整。")])])]),t._v(" "),s("li",[s("code",[t._v("java.lang.OutOfMemoryError: PermGen space")]),t._v("：说明是 JVM 对永久代Perm内存设置不够。\n"),s("ul",[s("li",[t._v("一般出现这种情况，都是程序启动需要加载大量的第三方jar包。例如：在一个Tomcat下部署太多应用。或者大量动态反射生成的类不断被加载，最终导致Perm区被占满。")])])])])])]),t._v(" "),s("h3",{attrs:{id:"堆内存调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆内存调优"}},[t._v("#")]),t._v(" 堆内存调优")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("参数")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("分配内存说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("-Xms")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("堆初始内存大小 (默认为物理内存的 1/64)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("-Xmx")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("堆最大内存大小 (默认为物理内存的 1/4)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("-Xmn")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("堆新生代内存大小")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("-Xss")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("每个线程堆栈的内存大小(默认JDK5后1M，以前256K)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("-XX:+PrintGCDetails")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("输出详细的GC处理日志")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("-XX:+HeapDumpOnOutOfMemoryError")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("OOM时导出堆到文件")])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Java代码获取JVM内存信息：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回JVM的内存总量(-Xms)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" totalMemory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runtime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRuntime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("totalMemory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回JVM试图使用的最大内存(-Xmx)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" maxMemory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runtime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRuntime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxMemory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用JVM参数 ：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/d5b25522287f439085a51bf338e9a661.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/6e16c52c83ad464e8eebd49bdfc08c94.png",alt:""}})])]),t._v(" "),s("li",[s("p",[s("code",[t._v("-Xms8m -Xmx8m -XX:+PrintGCDetails")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/a4b4247f878c4202a7cbeee79b08e272.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("JVM内存分析工具(很多，介绍2个)：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("jvisualvm.exe")]),t._v(" ：$JAVA_HOME/bin/jvisualvm.exe")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/cac16192207a4a218bd903e5f2babd6f.png",alt:""}})])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://www.eclipse.org/mat/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eclipse MAT"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/4034ad7de5ac491c98a26e7a7d0a3a54.png",alt:""}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("加上 -XX:+HeapDumpOnOutOfMemoryError，出现OOM错误，就会导出堆信息，生成.hprof文件。")]),t._v(" "),s("p",[t._v("注意："),s("strong",[t._v("XxxError用Exception是捕捉不到的，因为它是Throwable的子类")]),t._v("。")])])])]),t._v(" "),s("h2",{attrs:{id:"gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[t._v("#")]),t._v(" GC")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/7fd7996b8bfc40858b5758b0d8004d5b.png",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("GC：JVM的垃圾回收，采用 "),s("strong",[t._v("分代收集算法")]),t._v("。"),s("strong",[t._v("次数上，频繁收集 新生区(Young)，较少收集 养老区(Old)，基本不动 永久区(Perm)")]),t._v("。")]),t._v(" "),s("li",[t._v("GC分类：\n"),s("ul",[s("li",[t._v("普通GC (Minor GC)：只针对新生代的GC。")]),t._v(" "),s("li",[t._v("全局GC (Major GC / Full GC)：针对老年代的GC，偶尔伴随对新生代的GC以及对永久代的GC。")])])])]),t._v(" "),s("h3",{attrs:{id:"gc-4大算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc-4大算法"}},[t._v("#")]),t._v(" GC 4大算法")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("引用计数法")]),t._v("：给内存中的对象给打上标记，对象被引用一次，计数就加1，引用被释放了，计数就减一，当这个计数为0的时候，这个对象就可以被回收了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/69b99ac27afa44e2b875ad13dc0d9b0a.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("缺点 ("),s("strong",[t._v("JVM一般不采用引用计数法")]),t._v(")：")]),t._v(" "),s("ul",[s("li",[t._v("对象每次赋值只均要维护引用计数器，且计数器本身也有一定的消耗。")]),t._v(" "),s("li",[t._v("较难处理循环引用。")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("复制算法 (Copying)")]),t._v("："),s("strong",[t._v("新生代使用的 Minor GC，采用的是 复制算法。")]),s("br"),t._v("\n经过一次Minor GC (检查伊甸区和幸存from区)后，如果存活的对象能够被幸存to区容纳(即to区有足够的空间来存储伊甸区和from区中所有存活的对象)，则使用复制算法将这些存活的对象复制到幸存to区，然后清理清理伊甸区和from区，并设置年龄(新对象为1，其它对象加1)。幸存区的2个分区交换身份，空闲的区为幸存to区。以后发生Minor GC，幸存分区也是不停 复制，清理，交换身份。当存活的对象熬到15岁，这些对象就会进入养老区。(一般来说，如果幸存to区能够容纳，伊甸区所有存活的对象都会被复制到幸存to区，而在幸存from区存活的对象会根据年龄值来决定去向。)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/15115f71ee0740b28a1540fd230d91f6.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/4bc043f7ea1a4b5da84711e30f985a52.png",alt:""}})]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("复制算法的基本思想：将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。"),s("strong",[t._v("复制算法不会产生内存碎片")]),t._v("。")]),t._v(" "),s("li",[t._v("-XX:MaxTenuringThreshold\t\t设置对象在新生代中存活的次数")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("标记清除 (Mark-Sweep)")]),t._v("：当堆中的有效内存空间被耗尽时，就会停止整个程序(stop the world)，然后进行标记和清除。")]),t._v(" "),s("ul",[s("li",[t._v("标记：从引用根节点开始标记所有被引用的对象。标记的过程就是遍历所有的 GC Roots，然后将所有GC Roots可达的对象标记为存活的对象。")]),t._v(" "),s("li",[t._v("清除：遍历整个堆，把未标记的对象清除。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/5fa28e3fc36543c9b5a4f3f6dc0e3447.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("缺点：")]),t._v(" "),s("ul",[s("li",[t._v("效率比较低(递归与遍历全推对象)，需要暂停整个应用。")]),t._v(" "),s("li",[t._v("会产生内存碎片，因为这种方式清理出来的空闲内存是不连续的。JVM就不得不维持一个内存的空闲列表，这又是一种开销。而且分配数组对象时，寻找连续的内存空间不好找。")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("标记压缩 (Mark-Compact)")]),t._v("：标记过程 与标记清除一样，在整理压缩阶段，不再对标记的对象做回收，而是所有存活对象都向一端移动，然后直接清除边界以外的内存。(这不用维护一个空闲列表)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://good-person.gitee.io/blog-bed/77ef9cf5ed784281bb599e31555ffb21.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("缺点：效率比较，不仅要标记所有存活的对象，还要整理所有存活对象的引用地址。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("标记清除压缩 (Mark-Sweep-Compact)")]),t._v("：上面是GC的4大算法，标记清除压缩(Mark-Sweep-Compact) 是 标记清除(Mark-Sweep) 和 标记压缩(Mark-Compact) 的结合。"),s("strong",[t._v("老年代一般是由 标记清除 或 标记清除压缩 的混合实现。")])]),t._v(" "),s("ul",[s("li",[t._v("原理：和 标记清除 一致，当进行多次GC后才压缩。")]),t._v(" "),s("li",[t._v("优势：减少移动对象的成本。")])])]),t._v(" "),s("li",[s("p",[t._v("总结：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("内存效率：复制算法 > 标记清除 > 标记压缩  (此处只是简单的对比时间复杂度，实际情况不一定)")])]),t._v(" "),s("li",[s("p",[t._v("内存整齐度：复制算法 = 标记压缩 > 标记清除")])]),t._v(" "),s("li",[s("p",[t._v("内存利用率：标记压缩 = 标记清除 > 复制算法")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("最合适的算法：分代收集算法")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("新生代")]),t._v("：对象存活率低，适合 "),s("strong",[t._v("复制算法")]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("老年代")]),t._v("：大量存活率高的对象，适合 "),s("strong",[t._v("标记清除 或 标记清除压缩 和混合实现")]),t._v("。")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("标记阶段：开销与存活对象数量成正比，对于老年代有些不符。但可以通过多核/多线程利用，用并发、并行的形式提高标记效率。")]),t._v(" "),s("li",[t._v("清除阶段：开销与所管理区域的大小成正相关。但清除”就地处决“的特点，回收的过程没有对象的移动。相对于有对象移动的回收算法，仍然时效率最高的，不过内存碎片。")]),t._v(" "),s("li",[t._v("压缩阶段：开销与存活对象的数据量成正比，对于大量移动对象是很大开销的，作为老年代的第一选择并不合适。所以老年代一般是标记清除 或 标记清除压缩 和混合实现。")])])])])])])])])]),t._v(" "),s("h2",{attrs:{id:"jmm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmm"}},[t._v("#")]),t._v(" JMM")]),t._v(" "),s("h2",{attrs:{id:"面试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试"}},[t._v("#")]),t._v(" 面试")]),t._v(" "),s("ul",[s("li",[t._v("请谈谈你对JVM的理解？Java8的虚拟机有什么更新？")]),t._v(" "),s("li",[t._v("什么是OOM？什么是StackOverflowError?有哪些方法分析？")]),t._v(" "),s("li",[t._v("JVM的常用参数调优你知道哪些？")]),t._v(" "),s("li",[t._v("内存快照抓取和MAT分析DUMP文件知道吗？")]),t._v(" "),s("li",[t._v("谈谈JVM中，对类加载器你的认识？")]),t._v(" "),s("li",[t._v("JVM内存模型以及分区，需要详细到每个区放什么？")]),t._v(" "),s("li",[t._v("堆里面的分区：Eden、Survial from to、Old，各自的特点。")]),t._v(" "),s("li",[t._v("GC的三种收集方法：标记清除、标记整理、复制算法的原理与特点，分别用在什么地方")]),t._v(" "),s("li",[t._v("Minor GC 与 Full GC 分别在什么时候发生。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);